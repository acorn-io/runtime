kind: Deployment
apiVersion: apps/v1
metadata:
  name: container-name
  namespace: app-created-namespace
  labels:
    "acorn.io/app-namespace": "app-namespace"
    "acorn.io/app-name": "app-name"
    "acorn.io/container-name": "container-name"
    "acorn.io/managed": "true"
spec:
  selector:
    matchLabels:
      "acorn.io/app-namespace": "app-namespace"
      "acorn.io/app-name": "app-name"
      "acorn.io/container-name": "container-name"
      "acorn.io/managed": "true"
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        "acorn.io/app-namespace": "app-namespace"
        "acorn.io/app-name": "app-name"
        "acorn.io/container-name": "container-name"
        "acorn.io/managed": "true"
      annotations:
        acorn.io/container-spec: '{"dirs":{"/var/tmp":{"secret":{},"volume":"foo"}},"image":"image-name","probes":null}'
    spec:
      imagePullSecrets:
        - name: container-name-pull-1234567890ab
      terminationGracePeriodSeconds: 5
      hostname: container-name
      enableServiceLinks: false
      serviceAccountName: container-name
      volumes:
        - name: foo
          persistentVolumeClaim:
            claimName: foo
      containers:
        - name: container-name
          image: "image-name"
          volumeMounts:
            - mountPath: "/var/tmp"
              name: foo
---
kind: PodDisruptionBudget
apiVersion: policy/v1
metadata:
  name: container-name
  namespace: app-created-namespace
  labels:
    "acorn.io/app-namespace": "app-namespace"
    "acorn.io/app-name": "app-name"
    "acorn.io/container-name": "container-name"
    "acorn.io/managed": "true"
spec:
  selector:
    matchLabels:
      "acorn.io/app-namespace": "app-namespace"
      "acorn.io/app-name": "app-name"
      "acorn.io/container-name": "container-name"
      "acorn.io/managed": "true"
  maxUnavailable: 1
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "foo"
  namespace: app-created-namespace
  labels:
    "acorn.io/app-namespace": "app-namespace"
    "acorn.io/app-name": "app-name"
    "acorn.io/managed": "true"
    "acorn.io/volume-name": "foo"
    acorn.io/volume-class: cli-class
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20_000_000_000
  storageClassName: "cli-class"
---
kind: AppInstance
apiVersion: internal.acorn.io/v1
metadata:
  name: app-name
  namespace: app-namespace
  uid: 1234567890abcdef
spec:
  image: test
  volumes:
    - target: foo
      size: 20G
      class: cli-class
status:
  namespace: app-created-namespace
  appImage:
    id: test
  appSpec:
    containers:
      container-name:
        image: "image-name"
        dirs:
          "/var/tmp":
            volume: foo
    volumes:
      foo:
        class: custom-class
        size: 10
  conditions:
    - type: defined
      reason: Success
      status: "True"
      success: true
