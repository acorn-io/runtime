`apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    acorn.io/app-name: app-with-metrics
    acorn.io/app-namespace: app-namespace
    acorn.io/app-public-name: app-with-metrics
    acorn.io/container-name: nginx
    acorn.io/managed: "true"
    acorn.io/project-name: app-namespace
  name: nginx
  namespace: app-created-namespace

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    acorn.io/app-name: app-with-metrics
    acorn.io/app-namespace: app-namespace
    acorn.io/app-public-name: app-with-metrics
    acorn.io/container-name: nginx
    acorn.io/managed: "true"
    acorn.io/project-name: app-namespace
  name: nginx
  namespace: app-created-namespace
spec:
  selector:
    matchLabels:
      acorn.io/app-name: app-with-metrics
      acorn.io/app-namespace: app-namespace
      acorn.io/container-name: nginx
      acorn.io/managed: "true"
  strategy: {}
  template:
    metadata:
      annotations:
        acorn.io/container-spec: '{"image":"foo","metrics":{"path":"/","port":80},"ports":[{"protocol":"http","targetPort":80}],"probes":null}'
        karpenter.sh/do-not-evict: "true"
        prometheus.io/path: /
        prometheus.io/port: "80"
        prometheus.io/scrape: "true"
      creationTimestamp: null
      labels:
        acorn.io/app-name: app-with-metrics
        acorn.io/app-namespace: app-namespace
        acorn.io/app-public-name: app-with-metrics
        acorn.io/container-name: nginx
        acorn.io/managed: "true"
        acorn.io/project-name: app-namespace
    spec:
      containers:
      - image: foo
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 80
        resources: {}
      enableServiceLinks: false
      hostname: nginx
      imagePullSecrets:
      - name: nginx-pull-abcdef123456
      serviceAccountName: nginx
      terminationGracePeriodSeconds: 5
status: {}

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  creationTimestamp: null
  labels:
    acorn.io/app-name: app-with-metrics
    acorn.io/app-namespace: app-namespace
    acorn.io/app-public-name: app-with-metrics
    acorn.io/container-name: nginx
    acorn.io/managed: "true"
    acorn.io/project-name: app-namespace
  name: nginx
  namespace: app-created-namespace
spec:
  maxUnavailable: 25%
  selector:
    matchLabels:
      acorn.io/app-name: app-with-metrics
      acorn.io/app-namespace: app-namespace
      acorn.io/container-name: nginx
      acorn.io/managed: "true"
status:
  currentHealthy: 0
  desiredHealthy: 0
  disruptionsAllowed: 0
  expectedPods: 0

---
apiVersion: internal.acorn.io/v1
kind: ServiceInstance
metadata:
  annotations:
    acorn.io/app-generation: "0"
  creationTimestamp: null
  labels:
    acorn.io/app-name: app-with-metrics
    acorn.io/app-namespace: app-namespace
    acorn.io/container-name: nginx
    acorn.io/managed: "true"
    acorn.io/public-name: app-with-metrics.nginx
  name: nginx
  namespace: app-created-namespace
spec:
  appName: app-with-metrics
  appNamespace: app-namespace
  container: nginx
  default: true
  labels:
    acorn.io/app-name: app-with-metrics
    acorn.io/app-namespace: app-namespace
    acorn.io/container-name: nginx
    acorn.io/managed: "true"
  ports:
  - port: 80
    protocol: http
    targetPort: 80
status: {}

---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJpbmRleC5kb2NrZXIuaW8iOnsiYXV0aCI6Ik9nPT0ifX19
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    acorn.io/managed: "true"
    acorn.io/pull-secret: "true"
  name: nginx-pull-abcdef123456
  namespace: app-created-namespace
type: kubernetes.io/dockerconfigjson

---
apiVersion: internal.acorn.io/v1
kind: AppInstance
metadata:
  creationTimestamp: null
  name: app-with-metrics
  namespace: app-namespace
  uid: abcdef123456
spec:
  image: test
status:
  appImage:
    buildContext: {}
    id: foo
    imageData: {}
    vcs: {}
  appSpec:
    containers:
      nginx:
        image: foo
        metrics:
          path: /
          port: 80
        ports:
        - protocol: http
          targetPort: 80
        probes: null
  appStatus: {}
  columns: {}
  conditions:
    reason: Success
    status: "True"
    success: true
    type: defined
  defaults: {}
  namespace: app-created-namespace
  staged:
    appImage:
      buildContext: {}
      imageData: {}
      vcs: {}
  summary: {}
`
